"""
Portfolio Dashboard Web Interface
Real-time portfolio monitoring and analytics visualization
"""

from flask import Flask, render_template, jsonify, request
import plotly
import plotly.graph_objs as go
import plotly.utils
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, List

logger = logging.getLogger(__name__)

class PortfolioDashboard:
    """Web dashboard for portfolio monitoring"""
    
    def __init__(self, portfolio_analytics, portfolio_monitor, risk_manager, port=5000):
        # Set template folder relative to this file
        import os
        template_dir = os.path.join(os.path.dirname(__file__), '../../templates')
        
        self.app = Flask(__name__, template_folder=template_dir)
        self.portfolio_analytics = portfolio_analytics
        self.portfolio_monitor = portfolio_monitor
        self.risk_manager = risk_manager
        self.port = port
        
        # Setup routes
        self._setup_routes()
        
    def _setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/')
        def dashboard():
            """Main dashboard page"""
            return render_template('dashboard.html')
        
        @self.app.route('/api/portfolio/overview')
        def portfolio_overview():
            """Portfolio overview data"""
            try:
                positions = self.risk_manager.positions
                
                if not positions:
                    return jsonify({'error': 'No positions found'})
                
                # Calculate overview metrics
                total_value = sum(
                    pos['size'] * pos.get('current_price', pos['entry_price'])
                    for pos in positions.values()
                )
                
                total_pnl = sum(
                    pos.get('unrealized_pnl', 0) + pos.get('realized_pnl', 0)
                    for pos in positions.values()
                )
                
                positions_data = []
                for symbol, position in positions.items():
                    current_price = position.get('current_price', position['entry_price'])
                    value = position['size'] * current_price
                    weight = value / total_value if total_value > 0 else 0
                    
                    positions_data.append({
                        'symbol': symbol,
                        'side': position['side'],
                        'size': position['size'],
                        'entry_price': position['entry_price'],
                        'current_price': current_price,
                        'value': value,
                        'weight': weight,
                        'pnl': position.get('unrealized_pnl', 0),
                        'pnl_pct': (position.get('unrealized_pnl', 0) / (position['size'] * position['entry_price'])) * 100
                    })\n                \n                return jsonify({\n                    'total_value': total_value,\n                    'total_pnl': total_pnl,\n                    'total_return_pct': (total_pnl / total_value) * 100 if total_value > 0 else 0,\n                    'position_count': len(positions),\n                    'positions': positions_data\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting portfolio overview: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/portfolio/performance')\n        def portfolio_performance():\n            \"\"\"Portfolio performance metrics\"\"\"\n            try:\n                # Get portfolio returns (simplified)\n                positions = self.risk_manager.positions\n                symbols = list(positions.keys())\n                \n                if not symbols:\n                    return jsonify({'error': 'No positions for performance calculation'})\n                \n                # Calculate dummy portfolio returns for demo\n                returns = self._generate_demo_returns()\n                \n                # Calculate metrics\n                metrics = self.portfolio_analytics.calculate_portfolio_metrics(\n                    returns, \n                    positions=positions\n                )\n                \n                return jsonify({\n                    'total_return': metrics.total_return,\n                    'sharpe_ratio': metrics.sharpe_ratio,\n                    'sortino_ratio': metrics.sortino_ratio,\n                    'max_drawdown': metrics.max_drawdown,\n                    'volatility': metrics.volatility,\n                    'win_rate': metrics.win_rate,\n                    'profit_factor': metrics.profit_factor,\n                    'var_95': metrics.var_95,\n                    'diversification_ratio': metrics.diversification_ratio\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting portfolio performance: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/portfolio/allocation')\n        def portfolio_allocation():\n            \"\"\"Portfolio allocation chart data\"\"\"\n            try:\n                positions = self.risk_manager.positions\n                \n                if not positions:\n                    return jsonify({'labels': [], 'values': []})\n                \n                total_value = sum(\n                    pos['size'] * pos.get('current_price', pos['entry_price'])\n                    for pos in positions.values()\n                )\n                \n                labels = []\n                values = []\n                colors = []\n                \n                color_palette = [\n                    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', \n                    '#FECA57', '#FF9FF3', '#54A0FF', '#5F27CD'\n                ]\n                \n                for i, (symbol, position) in enumerate(positions.items()):\n                    value = position['size'] * position.get('current_price', position['entry_price'])\n                    weight = (value / total_value) * 100 if total_value > 0 else 0\n                    \n                    labels.append(symbol)\n                    values.append(weight)\n                    colors.append(color_palette[i % len(color_palette)])\n                \n                return jsonify({\n                    'labels': labels,\n                    'values': values,\n                    'colors': colors\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting portfolio allocation: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/portfolio/pnl_chart')\n        def pnl_chart():\n            \"\"\"P&L chart data\"\"\"\n            try:\n                # Generate demo P&L data\n                dates = pd.date_range(end=datetime.now(), periods=30, freq='D')\n                \n                # Calculate cumulative P&L (demo data)\n                daily_returns = np.random.normal(0.001, 0.02, 30)  # 0.1% daily return, 2% volatility\n                cumulative_pnl = np.cumsum(daily_returns) * 100000  # Assume $100k portfolio\n                \n                return jsonify({\n                    'dates': [d.strftime('%Y-%m-%d') for d in dates],\n                    'pnl': cumulative_pnl.tolist()\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting P&L chart: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/alerts')\n        def get_alerts():\n            \"\"\"Get current alerts\"\"\"\n            try:\n                active_alerts = self.portfolio_monitor.get_active_alerts()\n                alert_summary = self.portfolio_monitor.get_alert_summary()\n                \n                alerts_data = []\n                for alert in active_alerts[:10]:  # Latest 10 alerts\n                    alerts_data.append({\n                        'id': alert.id,\n                        'type': alert.type.value,\n                        'severity': alert.severity.value,\n                        'title': alert.title,\n                        'message': alert.message,\n                        'timestamp': alert.timestamp.isoformat(),\n                        'acknowledged': alert.acknowledged\n                    })\n                \n                return jsonify({\n                    'alerts': alerts_data,\n                    'summary': alert_summary\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting alerts: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/alerts/<alert_id>/acknowledge', methods=['POST'])\n        def acknowledge_alert(alert_id):\n            \"\"\"Acknowledge an alert\"\"\"\n            try:\n                self.portfolio_monitor.acknowledge_alert(alert_id)\n                return jsonify({'status': 'success'})\n            except Exception as e:\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/rebalancing/recommendations')\n        def rebalancing_recommendations():\n            \"\"\"Get rebalancing recommendations\"\"\"\n            try:\n                positions = self.risk_manager.positions\n                \n                if not positions:\n                    return jsonify({'recommendations': []})\n                \n                # For demo, create simple target weights\n                symbols = list(positions.keys())\n                target_weights = {symbol: 1.0/len(symbols) for symbol in symbols}  # Equal weight\n                \n                recommendations = self.portfolio_analytics.analyze_rebalancing_needs(\n                    positions, target_weights, tolerance=0.05\n                )\n                \n                recommendations_data = []\n                for rec in recommendations:\n                    recommendations_data.append({\n                        'symbol': rec.symbol,\n                        'current_weight': rec.current_weight,\n                        'target_weight': rec.target_weight,\n                        'weight_deviation': rec.weight_deviation,\n                        'action': rec.action,\n                        'amount_to_trade': rec.amount_to_trade,\n                        'urgency': rec.urgency,\n                        'reason': rec.reason\n                    })\n                \n                return jsonify({'recommendations': recommendations_data})\n                \n            except Exception as e:\n                logger.error(f\"Error getting rebalancing recommendations: {e}\")\n                return jsonify({'error': str(e)})\n        \n        @self.app.route('/api/risk/metrics')\n        def risk_metrics():\n            \"\"\"Get risk metrics\"\"\"\n            try:\n                risk_data = self.risk_manager.calculate_risk_metrics()\n                \n                return jsonify({\n                    'current_drawdown': risk_data.current_drawdown,\n                    'max_drawdown': risk_data.max_drawdown,\n                    'risk_score': risk_data.risk_score,\n                    'sharpe_ratio': risk_data.sharpe_ratio,\n                    'position_count': len(self.risk_manager.positions),\n                    'capital_utilization': self.risk_manager.get_capital_utilization()\n                })\n                \n            except Exception as e:\n                logger.error(f\"Error getting risk metrics: {e}\")\n                return jsonify({'error': str(e)})\n    \n    def _generate_demo_returns(self, days=30):\n        \"\"\"Generate demo portfolio returns\"\"\"\n        dates = pd.date_range(end=datetime.now(), periods=days, freq='D')\n        returns = pd.Series(\n            np.random.normal(0.001, 0.02, days),  # 0.1% mean return, 2% volatility\n            index=dates\n        )\n        return returns\n    \n    def run(self, debug=False):\n        \"\"\"Run the dashboard server\"\"\"\n        logger.info(f\"Starting portfolio dashboard on port {self.port}\")\n        self.app.run(host='0.0.0.0', port=self.port, debug=debug)\n\n# HTML Template (would typically be in templates/dashboard.html)\nDASHBOARD_HTML = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Crypto Trading Portfolio Dashboard</title>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        .metric-card {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border-radius: 10px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .alert-badge {\n            position: absolute;\n            top: -5px;\n            right: -5px;\n        }\n        .portfolio-card {\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n        .positive { color: #28a745; }\n        .negative { color: #dc3545; }\n        .chart-container {\n            background: white;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body class=\"bg-light\">\n    <nav class=\"navbar navbar-dark bg-dark\">\n        <div class=\"container-fluid\">\n            <span class=\"navbar-brand mb-0 h1\">\n                <i class=\"fas fa-chart-line\"></i> Crypto Trading Portfolio Dashboard\n            </span>\n            <div class=\"position-relative\">\n                <button class=\"btn btn-outline-light\" id=\"alertsBtn\">\n                    <i class=\"fas fa-bell\"></i> Alerts\n                    <span class=\"badge bg-danger alert-badge\" id=\"alertCount\">0</span>\n                </button>\n            </div>\n        </div>\n    </nav>\n\n    <div class=\"container-fluid mt-4\">\n        <!-- Overview Row -->\n        <div class=\"row\">\n            <div class=\"col-md-3\">\n                <div class=\"metric-card\">\n                    <h6><i class=\"fas fa-wallet\"></i> Portfolio Value</h6>\n                    <h3 id=\"totalValue\">$0</h3>\n                    <small id=\"totalReturn\" class=\"text-light\">0.00%</small>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"metric-card\">\n                    <h6><i class=\"fas fa-chart-line\"></i> Total P&L</h6>\n                    <h3 id=\"totalPnl\">$0</h3>\n                    <small id=\"winRate\" class=\"text-light\">Win Rate: 0%</small>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"metric-card\">\n                    <h6><i class=\"fas fa-exclamation-triangle\"></i> Risk Score</h6>\n                    <h3 id=\"riskScore\">0</h3>\n                    <small id=\"drawdown\" class=\"text-light\">Drawdown: 0%</small>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"metric-card\">\n                    <h6><i class=\"fas fa-coins\"></i> Positions</h6>\n                    <h3 id=\"positionCount\">0</h3>\n                    <small id=\"sharpeRatio\" class=\"text-light\">Sharpe: 0.00</small>\n                </div>\n            </div>\n        </div>\n\n        <!-- Charts Row -->\n        <div class=\"row\">\n            <div class=\"col-md-8\">\n                <div class=\"chart-container\">\n                    <h5><i class=\"fas fa-chart-area\"></i> Portfolio P&L</h5>\n                    <div id=\"pnlChart\"></div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"chart-container\">\n                    <h5><i class=\"fas fa-pie-chart\"></i> Asset Allocation</h5>\n                    <div id=\"allocationChart\"></div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Positions and Alerts Row -->\n        <div class=\"row\">\n            <div class=\"col-md-8\">\n                <div class=\"portfolio-card card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-list\"></i> Current Positions</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover\" id=\"positionsTable\">\n                                <thead>\n                                    <tr>\n                                        <th>Symbol</th>\n                                        <th>Side</th>\n                                        <th>Size</th>\n                                        <th>Entry Price</th>\n                                        <th>Current Price</th>\n                                        <th>P&L</th>\n                                        <th>Weight</th>\n                                    </tr>\n                                </thead>\n                                <tbody></tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"portfolio-card card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-exclamation-circle\"></i> Recent Alerts</h5>\n                    </div>\n                    <div class=\"card-body\" id=\"alertsList\" style=\"max-height: 400px; overflow-y: auto;\">\n                        <!-- Alerts will be loaded here -->\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Rebalancing Recommendations -->\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div class=\"portfolio-card card\">\n                    <div class=\"card-header\">\n                        <h5><i class=\"fas fa-balance-scale\"></i> Rebalancing Recommendations</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover\" id=\"rebalancingTable\">\n                                <thead>\n                                    <tr>\n                                        <th>Symbol</th>\n                                        <th>Current Weight</th>\n                                        <th>Target Weight</th>\n                                        <th>Deviation</th>\n                                        <th>Action</th>\n                                        <th>Urgency</th>\n                                        <th>Reason</th>\n                                    </tr>\n                                </thead>\n                                <tbody></tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Dashboard JavaScript\n        function formatCurrency(value) {\n            return new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD'\n            }).format(value);\n        }\n\n        function formatPercentage(value) {\n            return (value * 100).toFixed(2) + '%';\n        }\n\n        function getSeverityBadge(severity) {\n            const badges = {\n                'low': 'badge bg-info',\n                'medium': 'badge bg-warning',\n                'high': 'badge bg-danger',\n                'critical': 'badge bg-dark'\n            };\n            return badges[severity] || 'badge bg-secondary';\n        }\n\n        function getUrgencyBadge(urgency) {\n            const badges = {\n                'low': 'badge bg-success',\n                'medium': 'badge bg-warning text-dark',\n                'high': 'badge bg-danger'\n            };\n            return badges[urgency] || 'badge bg-secondary';\n        }\n\n        function loadPortfolioOverview() {\n            $.get('/api/portfolio/overview', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                $('#totalValue').text(formatCurrency(data.total_value));\n                $('#totalPnl').text(formatCurrency(data.total_pnl));\n                $('#totalReturn').text(data.total_return_pct.toFixed(2) + '%');\n                $('#totalReturn').addClass(data.total_return_pct >= 0 ? 'positive' : 'negative');\n                $('#positionCount').text(data.position_count);\n\n                // Update positions table\n                const tbody = $('#positionsTable tbody');\n                tbody.empty();\n\n                data.positions.forEach(function(pos) {\n                    const row = `\n                        <tr>\n                            <td><strong>${pos.symbol}</strong></td>\n                            <td><span class=\"badge ${pos.side === 'long' ? 'bg-success' : 'bg-danger'}\">${pos.side.toUpperCase()}</span></td>\n                            <td>${pos.size.toFixed(4)}</td>\n                            <td>${formatCurrency(pos.entry_price)}</td>\n                            <td>${formatCurrency(pos.current_price)}</td>\n                            <td class=\"${pos.pnl >= 0 ? 'positive' : 'negative'}\">\n                                ${formatCurrency(pos.pnl)}<br>\n                                <small>(${pos.pnl_pct.toFixed(2)}%)</small>\n                            </td>\n                            <td>${formatPercentage(pos.weight)}</td>\n                        </tr>\n                    `;\n                    tbody.append(row);\n                });\n            });\n        }\n\n        function loadPerformanceMetrics() {\n            $.get('/api/portfolio/performance', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                $('#winRate').text(`Win Rate: ${formatPercentage(data.win_rate)}`);\n                $('#sharpeRatio').text(`Sharpe: ${data.sharpe_ratio.toFixed(2)}`);\n            });\n        }\n\n        function loadRiskMetrics() {\n            $.get('/api/risk/metrics', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                $('#riskScore').text(data.risk_score.toFixed(0));\n                $('#drawdown').text(`Drawdown: ${formatPercentage(data.current_drawdown)}`);\n            });\n        }\n\n        function loadAllocation() {\n            $.get('/api/portfolio/allocation', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                const pieData = [{\n                    labels: data.labels,\n                    values: data.values,\n                    type: 'pie',\n                    marker: {\n                        colors: data.colors\n                    },\n                    textinfo: 'label+percent',\n                    textposition: 'outside'\n                }];\n\n                const layout = {\n                    height: 400,\n                    margin: { t: 20, b: 20, l: 20, r: 20 },\n                    showlegend: false\n                };\n\n                Plotly.newPlot('allocationChart', pieData, layout, {responsive: true});\n            });\n        }\n\n        function loadPnLChart() {\n            $.get('/api/portfolio/pnl_chart', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                const trace = {\n                    x: data.dates,\n                    y: data.pnl,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: 'Portfolio P&L',\n                    line: {\n                        color: '#667eea',\n                        width: 3\n                    },\n                    fill: 'tonexty',\n                    fillcolor: 'rgba(102, 126, 234, 0.1)'\n                };\n\n                const layout = {\n                    height: 400,\n                    margin: { t: 20, b: 40, l: 60, r: 20 },\n                    xaxis: { title: 'Date' },\n                    yaxis: { title: 'P&L ($)' },\n                    showlegend: false\n                };\n\n                Plotly.newPlot('pnlChart', [trace], layout, {responsive: true});\n            });\n        }\n\n        function loadAlerts() {\n            $.get('/api/alerts', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                $('#alertCount').text(data.summary.total_active);\n                \n                const alertsList = $('#alertsList');\n                alertsList.empty();\n\n                if (data.alerts.length === 0) {\n                    alertsList.html('<p class=\"text-muted\">No active alerts</p>');\n                    return;\n                }\n\n                data.alerts.forEach(function(alert) {\n                    const alertHtml = `\n                        <div class=\"alert alert-${alert.severity === 'critical' ? 'danger' : alert.severity === 'high' ? 'warning' : 'info'} alert-dismissible fade show\" role=\"alert\">\n                            <strong><i class=\"fas fa-${alert.type === 'performance' ? 'chart-line' : 'exclamation-triangle'}\"></i> ${alert.title}</strong>\n                            <p class=\"mb-1\">${alert.message}</p>\n                            <small class=\"text-muted\">${new Date(alert.timestamp).toLocaleString()}</small>\n                            ${!alert.acknowledged ? `<button type=\"button\" class=\"btn btn-sm btn-outline-primary mt-2\" onclick=\"acknowledgeAlert('${alert.id}')\">Acknowledge</button>` : ''}\n                        </div>\n                    `;\n                    alertsList.append(alertHtml);\n                });\n            });\n        }\n\n        function loadRebalancingRecommendations() {\n            $.get('/api/rebalancing/recommendations', function(data) {\n                if (data.error) {\n                    console.error(data.error);\n                    return;\n                }\n\n                const tbody = $('#rebalancingTable tbody');\n                tbody.empty();\n\n                if (data.recommendations.length === 0) {\n                    tbody.append('<tr><td colspan=\"7\" class=\"text-center text-muted\">No rebalancing needed</td></tr>');\n                    return;\n                }\n\n                data.recommendations.forEach(function(rec) {\n                    const row = `\n                        <tr>\n                            <td><strong>${rec.symbol}</strong></td>\n                            <td>${formatPercentage(rec.current_weight)}</td>\n                            <td>${formatPercentage(rec.target_weight)}</td>\n                            <td class=\"${rec.weight_deviation >= 0 ? 'positive' : 'negative'}\">\n                                ${formatPercentage(rec.weight_deviation)}\n                            </td>\n                            <td>\n                                <span class=\"badge ${rec.action === 'buy' ? 'bg-success' : 'bg-danger'}\">\n                                    ${rec.action.toUpperCase()}\n                                </span>\n                            </td>\n                            <td><span class=\"${getUrgencyBadge(rec.urgency)}\">${rec.urgency.toUpperCase()}</span></td>\n                            <td><small>${rec.reason}</small></td>\n                        </tr>\n                    `;\n                    tbody.append(row);\n                });\n            });\n        }\n\n        function acknowledgeAlert(alertId) {\n            $.post(`/api/alerts/${alertId}/acknowledge`, function(data) {\n                if (data.status === 'success') {\n                    loadAlerts(); // Reload alerts\n                }\n            });\n        }\n\n        // Load all data on page load\n        $(document).ready(function() {\n            loadPortfolioOverview();\n            loadPerformanceMetrics();\n            loadRiskMetrics();\n            loadAllocation();\n            loadPnLChart();\n            loadAlerts();\n            loadRebalancingRecommendations();\n\n            // Refresh data every 30 seconds\n            setInterval(function() {\n                loadPortfolioOverview();\n                loadPerformanceMetrics();\n                loadRiskMetrics();\n                loadAlerts();\n            }, 30000);\n\n            // Refresh charts every 5 minutes\n            setInterval(function() {\n                loadAllocation();\n                loadPnLChart();\n                loadRebalancingRecommendations();\n            }, 300000);\n        });\n    </script>\n</body>\n</html>\n\"\"\"\n\n# Save the HTML template\ndef create_dashboard_template():\n    \"\"\"Create the dashboard HTML template file\"\"\"\n    import os\n    \n    # Create templates directory if it doesn't exist\n    os.makedirs('templates', exist_ok=True)\n    \n    with open('templates/dashboard.html', 'w') as f:\n        f.write(DASHBOARD_HTML)\n    \n    print(\"Dashboard template created at templates/dashboard.html\")\n\nif __name__ == '__main__':\n    create_dashboard_template()\n