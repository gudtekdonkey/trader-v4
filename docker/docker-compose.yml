version: '3.8'

services:
  # Trading Bot Service
  trader:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trader-v4-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trader:trader_password@postgres:5432/trading
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
    networks:
      - trader-network

  # Web Dashboard Service
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trader-v4-dashboard
    restart: unless-stopped
    command: python dashboard/app.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trader:trader_password@postgres:5432/trading
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=production
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - trader-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trader-v4-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=trader_password
      - POSTGRES_DB=trading
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trader-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trader-v4-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trader-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trader-v4-prometheus
    restart: unless-stopped
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - trader-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trader-v4-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - trader-network

  # Jupyter Notebook for research
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trader-v4-jupyter
    restart: unless-stopped
    command: jupyter lab --ip=0.0.0.0 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trader:trader_password@postgres:5432/trading
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./src:/app/src
      - ./configs:/app/configs
    ports:
      - "8888:8888"
    depends_on:
      - postgres
      - redis
    networks:
      - trader-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trader-network:
    driver: bridge